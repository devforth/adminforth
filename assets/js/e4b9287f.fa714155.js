"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[7778],{36:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var r=t(4848),a=t(8453);const s={},i="Installation",o={id:"Getting Started",title:"Installation",description:"Prerequisites",source:"@site/docs/Getting Started.md",sourceDirName:".",slug:"/Getting Started",permalink:"/docs/Getting Started",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",next:{title:"TypeDoc API",permalink:"/docs/api/"}},l={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation-1",level:2},{value:"Possible configuration options",id:"possible-configuration-options",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"We recommend using Node v18 and higher"}),"\n",(0,r.jsx)(n.h2,{id:"installation-1",children:"Installation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir myadmin\ncd myadmin\nnpm install adminforth\n"})}),"\n",(0,r.jsxs)(n.p,{children:["AdminForth does not provide own HTTP server, but can add own listeners over exisitng ",(0,r.jsx)(n.a,{href:"https://expressjs.com/",children:"Express"})," server (Fastify support is planned in future). This allows to create custom APIs for backoffice in a way you know."]}),"\n",(0,r.jsx)(n.p,{children:"Let's install express:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install express@4.19.2\n"})}),"\n",(0,r.jsx)(n.p,{children:"For demo purposes we will use SQLite data source. You can use postgress, Mongo or Clickhouse as well."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install better-sqlite3@10.0.0\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can use adminforth in pure node, but we recommend using TypeScript for better development experience."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install typescript@5.4.5 --save-dev\nnpm install tsx@4.11.2 --save-dev\n"})}),"\n",(0,r.jsx)(n.h1,{id:"philosophy",children:"Philosophy"}),"\n",(0,r.jsx)(n.p,{children:"AdminForth is able to connect to existing databases and provide a backoffice for managing data including CRUD operations, filtering, sorting, and more."}),"\n",(0,r.jsx)(n.p,{children:"Database should be already created by using any database management tool, ORM or migrator. AdminForth does not provide a way to create tables or columns in the database."}),"\n",(0,r.jsx)(n.p,{children:"Once you have a database, you pass a connection string to AdminForth and define resources(tables) and columns you would like to see in backoffice. For most DB AdminForth can guess column types and constraints (e.g. max-lenght) by connecting to DB. However you can redefine them in AdminForth configuration. Type and constraints definition are take precedence over DB metadata."}),"\n",(0,r.jsx)(n.p,{children:'Also in AdminForth you can define in "Vue" way how each field will be rendered, and create own pages e.g. Dashboards.'}),"\n",(0,r.jsxs)(n.p,{children:["In the demo we will create a simple database with 2 tables: ",(0,r.jsx)(n.code,{children:"apartments"})," and ",(0,r.jsx)(n.code,{children:"users"}),". We will just use plain SQL to create tables and insert some fake data."]}),"\n",(0,r.jsx)(n.p,{children:"Users table will be used to store a credentials for login into backoffice itself."}),"\n",(0,r.jsx)(n.h2,{id:"possible-configuration-options",children:"Possible configuration options"}),"\n",(0,r.jsx)(n.p,{children:"We will use schema with different column types for apartments to show many of AdminForth features."}),"\n",(0,r.jsxs)(n.p,{children:["Check ",(0,r.jsx)(n.a,{href:"/docs/api/type-aliases/AdminForthConfig",children:"AdminForthConfig"})," for all possible AdminForth Configs."]}),"\n",(0,r.jsx)(n.h1,{id:"setting-up-a-demo",children:"Setting up a demo"}),"\n",(0,r.jsxs)(n.p,{children:["Open ",(0,r.jsx)(n.code,{children:"package.json"}),", set ",(0,r.jsx)(n.code,{children:"type"})," to ",(0,r.jsx)(n.code,{children:"module"})," and add ",(0,r.jsx)(n.code,{children:"start"})," script:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  ...\n  "type": "module",\n  "scripts": {\n    ...\n    "start": "ADMINFORTH_SECRET=CHANGE_ME_IN_PRODUCTION NODE_ENV=development tsx watch index.ts"\n  },\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"index.ts"})," file with following content:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"\nimport betterSqlite3 from 'better-sqlite3';\nimport express from 'express';\nimport AdminForth from 'adminforth';\n\nconst dbFile = 'test.sqlite';\nconst db = betterSqlite3(dbFile)\n  \nconst tableExists = db.prepare(`SELECT name FROM sqlite_master WHERE type='table' AND name='apartments';`).get();\nif (!tableExists) {\n  await db.prepare(`\n    CREATE TABLE apartments (\n        id VARCHAR(20) PRIMARY KEY NOT NULL,\n        title VARCHAR(255) NOT NULL,\n        square_meter REAL,\n        price DECIMAL(10, 2) NOT NULL,\n        number_of_rooms INT,\n        description TEXT,\n        property_type VARCHAR(255) DEFAULT 'apartment',\n        listed BOOLEAN DEFAULT FALSE,\n        created_at TIMESTAMP,\n        user_id VARCHAR(255)\n    );`).run();\n\n  await db.prepare(`\n    CREATE TABLE users (\n        id VARCHAR(255) PRIMARY KEY NOT NULL,\n        email VARCHAR(255) NOT NULL,\n        password_hash VARCHAR(255) NOT NULL,\n        created_at VARCHAR(255) NOT NULL,\n        role VARCHAR(255) NOT NULL\n    );`).run();\n\n  for (let i = 0; i < 50; i++) {\n    await db.prepare(`\n      INSERT INTO apartments (\n        id, title, square_meter, price, number_of_rooms, description, created_at, listed, property_type\n      ) VALUES ('${i}', 'Apartment ${i}', ${Math.random() * 100}, ${Math.random() * 10000}, ${Math\n        .floor(Math.random() * 5) }, 'Next gen appartments', ${Date.now() / 1000 - i * 60 * 60 * 24}, ${i % 2 == 0}, ${i % 2 == 0 ? \"'house'\" : \"'apartment'\"});\n      `).run();\n  }\n}\n\nconst ADMIN_BASE_URL = '';\n\nconst admin = new AdminForth({\n  baseUrl : ADMIN_BASE_URL,\n  rootUser: {\n    username: 'adminforth',  // use these as credentials to login\n    password: 'adminforth',\n  },\n  auth: {\n    resourceId: 'users',  // resource for getting user\n    usernameField: 'email',\n    passwordHashField: 'password_hash',\n  },\n  customization: {\n    brandName: 'My Admin',\n    datesFormat: 'D MMM YY HH:mm:ss',\n    emptyFieldPlaceholder: '-',\n  },\n\n  dataSources: [\n    {\n      id: 'maindb',\n      url: `sqlite://${dbFile}`\n    },\n  ],\n  resources: [\n    {\n      dataSource: 'maindb', \n      table: 'apartments',\n      resourceId: 'apparts', // resourceId is defaulted to table name but you can change it e.g. \n                             // in case of same table names from different data sources\n      label: 'Apartments',   // label is defaulted to table name but you can change it\n      itemLabel: (r) => `\ud83c\udfe1 ${r.title}`,\n      columns: [\n        { \n          name: 'id', \n          label: 'Identifier',  // if you wish you can redefine label\n          showIn: ['filter', 'show'], // show in filter and in show page\n          primaryKey: true,\n          fillOnCreate: ({initialRecord, adminUser}) => Math.random().toString(36).substring(7),  // initialRecord is values user entered, adminUser object of user who creates record\n        },\n        { \n          name: 'title',\n          required: true,\n          showIn: ['list', 'create', 'edit', 'filter', 'show'],  // the default is full set\n          maxLength: 255,  // you can set max length for string fields\n          minLength: 3,  // you can set min length for string fields\n        }, \n        {\n          name: 'created_at',\n          type: AdminForth.Types.DATETIME ,\n          allowMinMaxQuery: true,\n          showIn: ['list', 'filter', 'show', 'edit'],\n          fillOnCreate: ({initialRecord, adminUser}) => (new Date()).toISOString(),\n        },\n        { \n          name: 'price',\n          min: 10,\n          max: 10000.12,\n          allowMinMaxQuery: true,  // use better experience for filtering e.g. date range, set it only if you have index on this column or if there will be low number of rows\n          editingNote: 'Price is in USD',  // you can appear note on editing or creating page\n        },\n        { \n          name: 'square_meter', \n          label: 'Square', \n          allowMinMaxQuery: true,\n          minValue: 1,  // you can set min /max value for number fields\n          maxValue: 1000,\n        },\n        { \n          name: 'number_of_rooms',\n          allowMinMaxQuery: true,\n          enum: [\n            { value: 1, label: '1 room' },\n            { value: 2, label: '2 rooms' },\n            { value: 3, label: '3 rooms' },\n            { value: 4, label: '4 rooms' },\n            { value: 5, label: '5 rooms' },\n          ],\n          allowCustomValue: true,\n        },\n        { \n          name: 'description',\n          sortable: false,\n        },\n        {\n          name: 'property_type',\n          enum: [{\n            value: 'house',\n            label: 'House'\n          }, {\n            value: 'apartment',\n            label: 'Apartment'\n          }, {\n            value: null,\n            label: 'Not defined'\n          }],\n        },\n        {\n          name: 'listed',\n          required: true,  // will be required on create/edit\n        },\n        {\n          name: 'user_id',\n          foreignResource: {\n            resourceId: 'users',\n          }\n        }\n      ],\n      options: {\n        listPageSize: 12,\n        allowedActions:{\n          edit: false,\n          delete: true,\n          show: true,\n          filter: true,\n        },\n      },\n    },\n    { \n      dataSource: 'maindb', \n      table: 'users',\n      resourceId: 'users',\n      label: 'Users',  \n      itemLabel: (r) => `\ud83d\udc64 ${r.email}`,\n      columns: [\n        { \n          name: 'id', \n          primaryKey: true,\n          fillOnCreate: ({initialRecord, adminUser}) => Math.random().toString(36).substring(7),\n          showIn: ['list', 'filter', 'show'],\n        },\n        { \n          name: 'email', \n          required: true,\n          isUnique: true,\n          validation: [\n            {\n              regExp: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$',\n              message: 'Email is not valid, must be in format example@test.com'\n            },\n          ]\n        },\n        { \n          name: 'created_at', \n          type: AdminForth.Types.DATETIME,\n          showIn: ['list', 'filter', 'show'],\n          fillOnCreate: ({initialRecord, adminUser}) => (new Date()).toISOString(),\n        },\n        {\n          name: 'role',\n          enum: [\n            { value: 'superadmin', label: 'Super Admin' },\n            { value: 'user', label: 'User' },\n          ]\n        },\n        {\n          name: 'password',\n          virtual: true,  // field will not be persisted into db\n          required: { create: true }, // make required only on create page\n          editingNote: { edit: 'Leave empty to keep password unchanged' },\n          minLength: 8,\n          type: AdminForth.Types.STRING,\n          showIn: ['create', 'edit'], // to show field only on create and edit pages\n          masked: true, // to show stars in input field\n        }\n      ],\n      hooks: {\n        create: {\n          beforeSave: async ({ record, adminUser, resource }) => {\n            record.password_hash = await AdminForth.Utils.generatePasswordHash(record.password);\n            return { ok:true, error: false };\n          }\n        },\n        edit: {\n          beforeSave: async ({ record, adminUser, resource}) => {\n            if (record.password) {\n              record.password_hash = await AdminForth.Utils.generatePasswordHash(record.password);\n            }\n            return { ok: true, error: false }\n          },\n        },\n      }\n    },\n  ],\n  menu: [\n    {\n      label: 'Core',\n      icon: 'flowbite:brain-solid', // any icon from iconify supported in format <setname>:<icon>, e.g. from here https://icon-sets.iconify.design/flowbite/\n      open: true,\n      children: [\n        {\n          homepage: true,\n          label: 'Appartments',\n          icon: 'flowbite:home-solid',\n          resourceId: 'apparts',\n        },\n      ]\n    },\n    {\n      type: 'gap'\n    },\n    {\n      type: 'divider'\n    },\n    {\n      type: 'heading',\n      label: 'SYSTEM',\n    },\n    {\n      label: 'Users',\n      icon: 'flowbite:user-solid',\n      resourceId: 'users',\n    }\n  ],\n})\n\n\nconst app = express()\napp.use(express.json());\nconst port = 3500;\n\n(async () => {\n    // needed to compile SPA. Call it here or from a build script e.g. in Docker build time to reduce downtime\n    await admin.bundleNow({ hotReload: process.env.NODE_ENV === 'development'});\n    console.log('Bundling AdminForth done. For faster serving consider calling bundleNow() from a build script.');\n})();\n\n\n// serve after you added all api\nadmin.express.serve(app, express)\nadmin.discoverDatabases();\n\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n  console.log(`\\n\u26a1 AdminForth is available at http://localhost:${port}${ADMIN_BASE_URL}\\n`)\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now you can run your app:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm start\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Open ",(0,r.jsx)(n.a,{href:"http://localhost:3500",children:"http://localhost:3500"})," in your browser and login with credentials ",(0,r.jsx)(n.code,{children:"adminforth"})," / ",(0,r.jsx)(n.code,{children:"adminforth"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"alt text",src:t(8470).A+"",width:"3456",height:"2043"})}),"\n",(0,r.jsx)(n.p,{children:"After Login you should see:"})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8470:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/image-4073119b1a64b412c6322c1917d972fc.png"},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);